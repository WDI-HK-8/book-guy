app.controller('MyBooksCtrl', ['$scope', '$http', '$location', '$auth', function($scope, $http, $location, $auth){

  var url = "<%= ENV['URL'] %>" || "http://localhost:3000";

  $http.get(url + '/mybooks').success(function(response){
    $scope.items = response;
  });

  $scope.book = {};
  $scope.form = {};

  $scope.form.create = function(){
    var data = {
      book: $scope.book
    };
    data.book.condition /= 2;
    $http.post(url + '/books', data).success(function(response){
    });
  };

  $scope.apiSearch = function(keyEvent, value) {
    if (keyEvent.which === 13) {
      var url = 'https://www.googleapis.com/books/v1/volumes?q=' + value.replace(' ', '+')
      $http.get(url).success(function(response){
        $scope.books = response.items


        $scope.books.forEach(function(book){
          book.publisher        = book.volumeInfo.publisher
          book.published_date   = book.volumeInfo.publishedDate
          book.page_count       = book.volumeInfo.pageCount
          book.description      = book.volumeInfo.description
          book.title            = book.volumeInfo.title
          book.category         = book.volumeInfo.category
          book.small_thumbnail  = book.volumeInfo.imageLinks.smallThumbnail
          book.thumbnail        = book.volumeInfo.imageLinks.thumbnail
          if (typeof book.volumeInfo.authors != 'undefined') {
            book.author           = book.volumeInfo.authors.join([separator = ', '])
          }
          if (typeof book.volumeInfo.industryIdentifiers != 'undefined') {
            book.volumeInfo.industryIdentifiers.forEach(function(isbn){
              if (isbn.type === "ISBN_10") {
                book.isbn10 = isbn.identifier
              }else if (isbn.type === "ISBN_13") {
                book.isbn13 = isbn.identifier
              }
            })
          }
          if (typeof book.volumeInfo.categories != 'undefined') {
            book.category = book.volumeInfo.categories[0]
          }
        });
      });
    }
  }

  $scope.editBook = function(id) {
    $scope.edit = angular.copy(getById($scope.items, id)) // Use copy to disable two way binding
    $scope.editing = true
    $scope.edit.condition *= 2
  }

  $scope.stopEdit = function() {
    $scope.editing = false
  }

  function getById(arr, id) {
    var result = [];
    arr.forEach(function(o){if (o.id == id) result.push(o);} );
    return result? result[0] : null; // or undefined
  }

  $scope.form.edit = function(id){
    var data = {
      book: angular.copy($scope.edit)
    };
    data.book.condition /= 2;
    $http.put(url + '/books/' + id , data).success(function(response){
    });
  };

  $scope.deleteBook = function(id){
    $http.delete(url + '/books/' + id).success(function(response){
    });
  };

  $scope.rate = 7;
  $scope.max = 10;
  $scope.isReadonly = false;

  $scope.hoveringOver = function(value) {
    $scope.overStar = value;
  };

}]);
